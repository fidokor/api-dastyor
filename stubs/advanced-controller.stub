<?php

namespace {{ namespace }};

use {{ baseController }};
use Exception;
use Illuminate\Http\Request;
use Spatie\RouteAttributes\Attributes\Resource;
use App\Services\{{ useService }};
use {{ modelNameSpace }};
{{ useCreateRequest }}
{{ useUpdateRequest }}
use Illuminate\Http\RedirectResponse;
use Illuminate\Contracts\View\View;

#[Resource(
    resource: '{{ modelKebabName }}'
)]
class {{ controllerName }} extends Controller {

    public function __construct(
        private readonly {{ serviceName }} $service
    ) {
    }

    public function index(Request $request): View {
        return view('{{ modelKebabName }}.index');
    }

    public function create(): View {
        $model = new {{ modelName }}();
        return view('{{ modelKebabName }}.create', compact(['model']));
    }

    public function store({{ createRequest }} $request): RedirectResponse {
        try {
            $model = $this->service->create($request->validated());

            return redirect()
                    ->route('{{ modelKebabName }}.index')
                    ->with('success_save', tr('Successfully saved'));
        } catch (Exception $exception) {
            return redirect()
                ->back()
                ->with('warning', tr('Something went wrong'));
        }
    }

    public function show(int $id): View {
        $model = $this->service->find($id);
        return view('{{ modelKebabName }}.show', ['model' => $model]);
    }

    public function edit(int $id): View {
        $model = $this->service->find($id);
        return view('{{ modelKebabName }}.edit', ['model' => $model]);
    }

    public function update({{ updateRequest }} $request, string $id): ?RedirectResponse {
        try {
            $model = $this->service->update($id, $request->validated());

            return redirect()
                ->route('{{ modelKebabName }}.show', $model->id)
                ->with('success_update', tr('Successfully updated'));
        } catch (Exception $exception) {
            return redirect()
                    ->back()
                    ->with('warning', tr('Something went wrong'));
        }
    }

    public function destroy(int $id): RedirectResponse {
        try {
            $this->service->delete($id);

            return redirect()
                ->route('{{ modelKebabName }}.index');
        } catch (Exception $exception) {
            return redirect()
                ->back()
                ->with('warning', tr('Something went wrong'));
        }
    }
}
