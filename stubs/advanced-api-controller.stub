<?php

namespace {{ namespace }};

use App\Http\Controllers\Controller;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Spatie\RouteAttributes\Attributes\ApiResource;
use Ijodkor\ApiResponse\Responses\RestResponse;
use App\Services\{{ useService }};
{{ useCreateRequest }}
{{ useUpdateRequest }}
use App\Http\Resources\{{ useResource }};

#[ApiResource(
    resource: '{{ modelKebabName }}'
)]
class {{ controllerName }} extends Controller {
    use RestResponse;

    public function __construct(
        private readonly {{ serviceName }} $service
    ) {
    }

    public function index(Request $request): JsonResponse {
        try {
            $paginate = $request->query('paginate') ?? 12;
            return $this->paginated({{ resourceName }}::collection($this->service->all($paginate)), '{{ modelNamePlural }}');
        } catch (Exception $exception) {
            return $this->fail(message: $exception->getMessage());
        }
    }

    public function store({{ createRequest }} $request): JsonResponse {
        try {
            $model = $this->service->create($request->validated());
            return $this->success(['{{ modelNameSingular }}' => $model]);
        } catch (Exception $exception) {
            return $this->fail(message: $exception->getMessage());
        }
    }

    public function show(int $id): JsonResponse {
        $model = $this->service->find($id);
        return $this->success(['{{ modelNameSingular }}' => {{ resourceName }}::make($model)]);
    }

    public function update({{ updateRequest }} $request, string $id): JsonResponse {
        try {
            $model = $this->service->update($id, $request->validated());
            return $this->success(['{{ modelNameSingular }}' => $model]);
        } catch (Exception $exception) {
            return $this->fail(message: $exception->getMessage());
        }
    }

    public function destroy(int $id): JsonResponse {
        try {
            $this->service->delete($id);
            return $this->success();
        } catch (Exception $exception) {
            return $this->fail(message: $exception->getMessage());
        }
    }
}
